import streamlit as st
import os
import requests
import json
from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime
import pandas as pd
import io
import yaml
from yaml.loader import SafeLoader
import hashlib
import time
from collections import defaultdict
import plotly.express as px
import plotly.graph_objects as go
from supabase_config import get_supabase_client

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# --- Configura√ß√µes de Autentica√ß√£o ---
def carregar_config_usuarios():
    """Carrega a configura√ß√£o de usu√°rios do arquivo config.yaml"""
    try:
        with open('config.yaml') as file:
            return yaml.load(file, Loader=SafeLoader)
    except FileNotFoundError:
        st.error("Arquivo de configura√ß√£o de usu√°rios n√£o encontrado!")
        return None

def verificar_credenciais(username, password):
    """Verifica se as credenciais do usu√°rio s√£o v√°lidas"""
    config = carregar_config_usuarios()
    if config is None:
        return False
    
    if username in config['credentials']['usernames']:
        stored_password = config['credentials']['usernames'][username]['password']
        # Hash da senha fornecida para compara√ß√£o
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        return stored_password == hashed_password
    return False

def inicializar_autenticacao():
    """Inicializa o estado de autentica√ß√£o"""
    if 'autenticado' not in st.session_state:
        st.session_state.autenticado = False
    if 'username' not in st.session_state:
        st.session_state.username = None
    if 'login_success' not in st.session_state:
        st.session_state.login_success = False

def login():
    """Interface de login"""
    st.title("üîê Login Mencare IA")
    
    # Se o login foi bem-sucedido, mostrar mensagem e redirecionar
    if st.session_state.login_success:
        st.success("Login realizado com sucesso!")
        st.session_state.login_success = False
        st.session_state.autenticado = True
        st.rerun()
        return
    
    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")
        
        if submit:
            if verificar_credenciais(username, password):
                st.session_state.username = username
                st.session_state.login_success = True
                st.rerun()
            else:
                st.error("Usu√°rio ou senha inv√°lidos!")

# --- Configura√ß√µes Iniciais ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Configura√ß√£o de tokens por plataforma
TOKENS_POR_PLATAFORMA = {
    "Disparo de WhatsApp": 150,
    "Email Marketing": 600,
    "Conte√∫do para Redes Sociais (Feed)": 300,
    "Conte√∫do para Redes Sociais (Stories)": 200,
    "Copy para SMS": 100       
}

# Adicionar ap√≥s as configura√ß√µes iniciais
METRICAS_POR_PLATAFORMA = {
    "Disparo de WhatsApp": {
        "respostas": 0,
        "taxa_conversao": 0.0,
        "total_disparos": 0
    },
    "Email Marketing": {
        "taxa_abertura": 0.0,
        "taxa_clique": 0.0,
        "taxa_conversao": 0.0,
        "total_envios": 0
    },
    "Conte√∫do para Redes Sociais (Feed)": {
        "compartilhamentos": 0,
        "likes": 0,
        "comentarios": 0,
        "alcance": 0
    },
    "Conte√∫do para Redes Sociais (Stories)": {
        "visualizacoes": 0,
        "respostas": 0,
        "cliques": 0,
        "alcance": 0
    },
    "Copy para SMS": {
        "taxa_clique": 0.0,
        "taxa_conversao": 0.0,
        "total_envios": 0
    }
}

# Adicionar ap√≥s as configura√ß√µes iniciais
TAGS_PREDEFINIDAS = {
    "Tipo de Neg√≥cio": [
        "E-commerce",
        "Servi√ßos",
        "Produtos F√≠sicos",
        "Digital",
        "B2B",
        "B2C"
    ],
    "Setor": [
        "Sa√∫de",
        "Educa√ß√£o",
        "Tecnologia",
        "Moda",
        "Alimenta√ß√£o",
        "Finan√ßas",
        "Imobili√°rio",
        "Outros"
    ],
    "Objetivo": [
        "Vendas",
        "Leads",
        "Engajamento",
        "Branding",
        "Fideliza√ß√£o",
        "Educa√ß√£o"
    ],
    "P√∫blico": [
        "Jovens",
        "Adultos",
        "Profissionais",
        "Empres√°rios",
        "Estudantes",
        "Fam√≠lias"
    ]
}

# Verificar se as configura√ß√µes essenciais est√£o presentes
if not OPENAI_API_KEY:
    st.error("Chave da API da OpenAI n√£o configurada. Verifique o arquivo .env.")
    st.stop()
if not (SUPABASE_URL and SUPABASE_KEY):
    st.warning("Configura√ß√µes do Supabase incompletas. A funcionalidade de salvar no banco de dados pode n√£o funcionar.")

# Inicializar cliente OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# Inicializar cliente Supabase
supabase = get_supabase_client()

# Inicializar autentica√ß√£o
inicializar_autenticacao()

# --- Fun√ß√µes Auxiliares ---

def gerar_copy_openai(plataforma, objetivo, publico_alvo, produto_servico, tom_de_voz, cta, informacoes_adicionais=""):
    # Obter o limite de tokens para a plataforma selecionada
    max_tokens = TOKENS_POR_PLATAFORMA.get(plataforma, 300)
    
    # Criar barra de progresso
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # Atualizar status - Preparando prompt
        status_text.text("üîÑ Preparando prompt...")
        progress_bar.progress(10)
        time.sleep(0.5)  # Pequena pausa para feedback visual
        
        prompt = f"""
        Voc√™ √© um copywriter especialista em marketing digital com mais de 20 anos de experi√™ncia.
        Sua tarefa √© gerar uma copy persuasiva e eficaz para a plataforma especificada.
        IMPORTANTE: Mantenha a copy dentro do limite de {max_tokens} tokens.

        Plataforma: {plataforma}
        Objetivo da Copy: {objetivo}
        P√∫blico-Alvo: {publico_alvo}
        Produto/Servi√ßo a ser promovido: {produto_servico}
        Tom de Voz desejado: {tom_de_voz}
        Call to Action (CTA): {cta}
        {f"Informa√ß√µes Adicionais: {informacoes_adicionais}" if informacoes_adicionais else ""}

        Instru√ß√µes espec√≠ficas para a plataforma '{plataforma}':
        """

        # Atualizar status - Configurando modelo
        status_text.text("‚öôÔ∏è Configurando modelo de IA...")
        progress_bar.progress(30)
        time.sleep(0.5)

        if plataforma == "Disparo de WhatsApp":
            prompt += """
            - Seja breve, direto e pessoal.
            - Use emojis com modera√ß√£o para aumentar o engajamento.
            - Ideal para mensagens curtas e impacto r√°pido.
            - Inicie de forma amig√°vel.
            - Deixe o CTA claro e f√°cil de seguir.
            - Considere o uso de gatilhos mentais como urg√™ncia ou escassez, se aplic√°vel.
            """
        elif plataforma == "Email Marketing":
            prompt += """
            - Assunto do email: Crie um assunto curto, chamativo e que gere curiosidade.
            - Corpo do email:
                - Comece com uma sauda√ß√£o personalizada, se poss√≠vel.
                - Desenvolva o problema ou necessidade do p√∫blico-alvo.
                - Apresente o produto/servi√ßo como a solu√ß√£o.
                - Destaque os principais benef√≠cios.
                - Use par√°grafos curtos e boa formata√ß√£o (negrito, listas).
                - O CTA deve ser claro e vis√≠vel (pode ser um link ou bot√£o).
            - Pode ser mais longo que outras plataformas, mas mantenha o foco.
            """
        elif plataforma == "Conte√∫do para Redes Sociais (Feed)":
            prompt += """
            - Adapte a linguagem para a rede social espec√≠fica (ex: Instagram mais visual, LinkedIn mais profissional).
            - Use hashtags relevantes (sugira 3-5 hashtags).
            - Incentive o engajamento (perguntas, enquetes, pedir coment√°rios).
            - Imagens/v√≠deos s√£o importantes, mas a copy precisa ser atrativa por si s√≥.
            - Pode contar uma pequena hist√≥ria ou dar uma dica r√°pida.
            """
        elif plataforma == "Conte√∫do para Redes Sociais (Stories)":
            prompt += """
            - Formato curto e din√¢mico.
            - Use texto conciso e chamativo.
            - Ideal para enquetes, perguntas r√°pidas, "arrasta para cima".
            - Pode ser mais informal.
            - O CTA deve ser imediato.
            """
        elif plataforma == "Copy para SMS":
            prompt += """
            - Extremamente curto e objetivo (limite de caracteres, geralmente 160).
            - CTA direto e, se poss√≠vel, com link encurtado.
            - Use abrevia√ß√µes com cautela para n√£o prejudicar a clareza.
            - Ideal para lembretes, promo√ß√µes r√°pidas ou alertas.
            """

        prompt += "\nGere a copy abaixo:\n"

        # Atualizar status - Gerando copy
        status_text.text("ü§ñ Gerando copy com IA...")
        progress_bar.progress(50)
        time.sleep(0.5)

        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um copywriter especialista em marketing digital."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=max_tokens
        )

        # Rastrear consumo de tokens
        tokens_consumidos = response.usage.total_tokens
        salvar_consumo_tokens(tokens_consumidos, "copy")
        
        # Atualizar status - Finalizando
        status_text.text("‚ú® Finalizando e formatando copy...")
        progress_bar.progress(90)
        time.sleep(0.5)

        copy_gerada = response.choices[0].message.content.strip()
        
        # Conclu√≠do
        status_text.text("‚úÖ Copy gerada com sucesso!")
        progress_bar.progress(100)
        time.sleep(0.5)
        
        # Limpar elementos de progresso
        progress_bar.empty()
        status_text.empty()
        
        return copy_gerada
    except Exception as e:
        # Em caso de erro
        status_text.text("‚ùå Erro ao gerar copy")
        progress_bar.progress(0)
        time.sleep(1)
        progress_bar.empty()
        status_text.empty()
        st.error(f"Erro ao contatar a OpenAI: {e}")
        return None

def salvar_no_supabase(data_to_save):
    """Salva uma copy no Supabase"""
    try:
        # Adicionar usu√°rio_id se dispon√≠vel
        if 'username' in st.session_state:
            data_to_save['usuario_id'] = st.session_state.username

        # Formatar dados para o Supabase
        payload = {
            "plataforma": data_to_save.get("plataforma"),
            "objetivo": data_to_save.get("objetivo"),
            "publico_alvo": data_to_save.get("publico_alvo"),
            "produto_servico": data_to_save.get("produto_servico"),
            "tom_de_voz": data_to_save.get("tom_de_voz"),
            "cta": data_to_save.get("cta"),
            "copy_gerada": data_to_save.get("copy_gerada"),
            "data_geracao": datetime.now().isoformat()
        }

        # Remover campos None
        payload = {k: v for k, v in payload.items() if v is not None}

        # Salvar no Supabase
        response = supabase.table('copies').insert(payload).execute()
        
        if response.data:
            st.success("Copy salva com sucesso no Supabase!")
            return True
        else:
            st.error("Erro ao salvar copy no Supabase.")
            return False
    except Exception as e:
        st.error(f"Erro ao salvar no Supabase: {e}")
        return False

def salvar_analise_leads(analise_data):
    """Salva a an√°lise de leads no Supabase"""
    try:
        # Adicionar usu√°rio_id se dispon√≠vel
        if 'username' in st.session_state:
            analise_data['usuario_id'] = st.session_state.username

        # Formatar dados para o Supabase
        payload = {
            "plataforma": analise_data.get("plataforma"),
            "objetivo": analise_data.get("objetivo"),
            "total_leads": analise_data.get("total_leads"),
            "colunas": json.dumps(analise_data.get("colunas", [])),
            "analise": analise_data.get("analise"),
            "tempo_processamento": analise_data.get("tempo_processamento"),
            "resumo_estatistico": json.dumps(analise_data.get("resumo_estatistico", {}))
        }

        # Salvar no Supabase
        response = supabase.table('analises_leads').insert(payload).execute()
        
        if response.data:
            # Salvar tags se existirem
            if 'tags' in analise_data and analise_data['tags']:
                for tag in analise_data['tags']:
                    tag_data = {
                        "analise_id": response.data[0]['id'],
                        "categoria": "Personalizada",
                        "tag": tag,
                        "usuario_id": st.session_state.username
                    }
                    supabase.table('tags').insert(tag_data).execute()
            
            return True
        else:
            st.error("Erro ao salvar an√°lise no Supabase.")
            return False
    except Exception as e:
        st.error(f"Erro ao salvar an√°lise: {e}")
        return False

def atualizar_tags_analise(analise_id, novas_tags):
    """Atualiza as tags de uma an√°lise espec√≠fica"""
    try:
        filename = f"historico/analises_{st.session_state.username}.json"
        
        if not os.path.exists(filename):
            st.error("Nenhuma an√°lise encontrada.")
            return False
        
        with open(filename, 'r', encoding='utf-8') as f:
            historico = json.load(f)
        
        # Encontrar e atualizar a an√°lise
        for analise in historico:
            if analise['id'] == analise_id:
                analise['tags'] = novas_tags
                break
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(historico, f, ensure_ascii=False, indent=4)
        
        return True
    except Exception as e:
        st.error(f"Erro ao atualizar tags: {e}")
        return False

def gerar_insights_com_tags(analise, tags):
    """Gera insights baseados nas tags da an√°lise"""
    try:
        # Carregar an√°lises anteriores com tags similares
        filename = f"historico/analises_{st.session_state.username}.json"
        insights = []
        
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                historico = json.load(f)
            
            # Filtrar an√°lises com tags similares
            analises_similares = [
                a for a in historico 
                if a['id'] != analise['id'] and 
                any(tag in a.get('tags', []) for tag in tags)
            ]
            
            if analises_similares:
                # Agrupar insights por tipo de tag
                insights_por_tag = {}
                for tag in tags:
                    insights_por_tag[tag] = []
                
                for analise_similar in analises_similares:
                    for tag in tags:
                        if tag in analise_similar.get('tags', []):
                            insights_por_tag[tag].append({
                                'data': analise_similar['data'],
                                'plataforma': analise_similar['plataforma'],
                                'objetivo': analise_similar['objetivo'],
                                'analise': analise_similar['analise']
                            })
                
                # Formatar insights
                for tag, analises in insights_por_tag.items():
                    if analises:
                        insights.append(f"\n### Insights baseados na tag '{tag}':")
                        for analise_similar in analises[:3]:  # Limitar a 3 insights por tag
                            insights.append(f"""
**Data:** {analise_similar['data']}
**Plataforma:** {analise_similar['plataforma']}
**Objetivo:** {analise_similar['objetivo']}
**An√°lise:** {analise_similar['analise']}
---""")
        
        return "\n".join(insights) if insights else "Nenhum insight similar encontrado."
    except Exception as e:
        st.error(f"Erro ao gerar insights: {e}")
        return "Erro ao gerar insights."

def carregar_historico_analises():
    """Carrega o hist√≥rico de an√°lises do usu√°rio atual"""
    try:
        filename = f"historico/analises_{st.session_state.username}.json"
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        st.error(f"Erro ao carregar hist√≥rico: {e}")
        return []

def salvar_feedback(analise_id, feedback_data):
    """Salva o feedback no Supabase"""
    try:
        # Adicionar usu√°rio_id se dispon√≠vel
        if 'username' in st.session_state:
            feedback_data['usuario_id'] = st.session_state.username

        # Formatar dados para o Supabase
        payload = {
            "analise_id": analise_id,
            "pontos_positivos": feedback_data.get("pontos_positivos"),
            "pontos_melhorar": feedback_data.get("pontos_melhorar"),
            "nota": feedback_data.get("nota"),
            "editado": False,
            "historico_edicoes": json.dumps([])
        }

        # Salvar no Supabase
        response = supabase.table('feedback').insert(payload).execute()
        
        if response.data:
            return True
        else:
            st.error("Erro ao salvar feedback no Supabase.")
            return False
    except Exception as e:
        st.error(f"Erro ao salvar feedback: {e}")
        return False

def editar_feedback(analise_id, novo_feedback):
    """Edita um feedback existente"""
    try:
        filename = f"feedback/feedback_{st.session_state.username}.json"
        
        if not os.path.exists(filename):
            st.error("Nenhum feedback encontrado para editar.")
            return False
        
        with open(filename, 'r', encoding='utf-8') as f:
            feedbacks = json.load(f)
        
        if analise_id not in feedbacks:
            st.error("Feedback n√£o encontrado.")
            return False
        
        # Salvar vers√£o anterior no hist√≥rico
        feedback_anterior = feedbacks[analise_id].copy()
        feedback_anterior["timestamp_edicao"] = datetime.now().isoformat()
        
        feedbacks[analise_id]["historico_edicoes"].append(feedback_anterior)
        
        # Atualizar feedback
        feedbacks[analise_id].update(novo_feedback)
        feedbacks[analise_id]["editado"] = True
        feedbacks[analise_id]["ultima_edicao"] = datetime.now().isoformat()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(feedbacks, f, ensure_ascii=False, indent=4)
        
        return True
    except Exception as e:
        st.error(f"Erro ao editar feedback: {e}")
        return False

def salvar_metricas_plataforma(plataforma, metricas_data):
    """Salva m√©tricas espec√≠ficas da plataforma no Supabase"""
    try:
        # Adicionar usu√°rio_id se dispon√≠vel
        if 'username' in st.session_state:
            metricas_data['usuario_id'] = st.session_state.username

        # Formatar dados para o Supabase
        payload = {
            "plataforma": plataforma,
            "metricas": json.dumps(metricas_data),
            "data": datetime.now().isoformat()
        }

        # Salvar no Supabase
        response = supabase.table('metricas_plataforma').insert(payload).execute()
        
        if response.data:
            return True
        else:
            st.error("Erro ao salvar m√©tricas no Supabase.")
            return False
    except Exception as e:
        st.error(f"Erro ao salvar m√©tricas da plataforma: {e}")
        return False

def analisar_leads_csv(df, plataforma, objetivo):
    """
    Analisa os leads do CSV e gera insights usando a IA
    """
    try:
        # Criar barra de progresso
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        tempo_inicio = time.time()
        
        # Atualizar status - Preparando dados
        status_text.text("üîÑ Preparando dados para an√°lise...")
        progress_bar.progress(10)
        time.sleep(0.5)
        
        # Carregar feedbacks anteriores para melhorar a an√°lise
        feedbacks = []
        if os.path.exists(f"feedback/feedback_{st.session_state.username}.json"):
            with open(f"feedback/feedback_{st.session_state.username}.json", 'r', encoding='utf-8') as f:
                feedbacks = list(json.load(f).values())
        
        # Atualizar status - Processando dados
        status_text.text("üìä Processando dados dos leads...")
        progress_bar.progress(30)
        time.sleep(0.5)
        
        # Otimizar dados para an√°lise
        # 1. Selecionar apenas colunas relevantes
        colunas_relevantes = df.columns[:9]  # Limitar a 9 colunas
        df_otimizado = df[colunas_relevantes].copy()
        
        # 2. Limitar n√∫mero de linhas para an√°lise
        max_linhas = 100  # Limitar a 100 linhas para an√°lise
        if len(df_otimizado) > max_linhas:
            df_otimizado = df_otimizado.sample(n=max_linhas, random_state=42)
        
        # 3. Preparar resumo estat√≠stico
        resumo_estatistico = {
            "total_leads": len(df),
            "colunas_analisadas": list(colunas_relevantes),
            "amostra_analisada": len(df_otimizado),
            "estatisticas": {}
        }
        
        # Adicionar estat√≠sticas b√°sicas para cada coluna
        for coluna in colunas_relevantes:
            if df_otimizado[coluna].dtype in ['int64', 'float64']:
                resumo_estatistico["estatisticas"][coluna] = {
                    "media": df_otimizado[coluna].mean(),
                    "mediana": df_otimizado[coluna].median(),
                    "min": df_otimizado[coluna].min(),
                    "max": df_otimizado[coluna].max()
                }
            else:
                # Para colunas categ√≥ricas, mostrar top 5 valores mais frequentes
                resumo_estatistico["estatisticas"][coluna] = {
                    "valores_mais_frequentes": df_otimizado[coluna].value_counts().head().to_dict()
                }
        
        # Converter o DataFrame otimizado para string
        df_str = df_otimizado.to_string()
        
        # Preparar contexto de aprendizado baseado em feedbacks anteriores
        contexto_aprendizado = ""
        if feedbacks:
            contexto_aprendizado = """
            Baseado em feedbacks anteriores dos usu√°rios, considere:
            """
            for feedback in feedbacks[:3]:  # Limitar a 3 feedbacks mais recentes
                if feedback.get('pontos_positivos'):
                    contexto_aprendizado += f"\n- Pontos positivos anteriores: {feedback['pontos_positivos']}"
                if feedback.get('pontos_melhorar'):
                    contexto_aprendizado += f"\n- Pontos a melhorar: {feedback['pontos_melhorar']}"
        
        # Atualizar status - Configurando an√°lise
        status_text.text("‚öôÔ∏è Configurando an√°lise com IA...")
        progress_bar.progress(50)
        time.sleep(0.5)
        
        prompt = f"""
        Voc√™ √© um especialista em an√°lise de dados e marketing digital.
        Analise os seguintes dados de leads e forne√ßa insights relevantes para {plataforma} com o objetivo de {objetivo}.

        {contexto_aprendizado}

        Resumo dos dados:
        - Total de leads: {resumo_estatistico['total_leads']}
        - Amostra analisada: {resumo_estatistico['amostra_analisada']}
        - Colunas analisadas: {', '.join(resumo_estatistico['colunas_analisadas'])}

        Estat√≠sticas b√°sicas:
        {json.dumps(resumo_estatistico['estatisticas'], indent=2)}

        Dados da amostra:
        {df_str}

        Por favor, forne√ßa:
        1. An√°lise geral dos dados
        2. Insights espec√≠ficos para {plataforma}
        3. Recomenda√ß√µes de estrat√©gia para atingir o objetivo de {objetivo}
        4. Sugest√µes de segmenta√ß√£o dos leads
        5. Poss√≠veis abordagens personalizadas

        Mantenha a an√°lise clara e objetiva, focando em insights acion√°veis.
        """

        # Atualizar status - Gerando an√°lise
        status_text.text("ü§ñ Gerando an√°lise com IA...")
        progress_bar.progress(70)
        time.sleep(0.5)

        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de dados e marketing digital."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=800 
        )
        
        # Rastrear consumo de tokens
        tokens_consumidos = response.usage.total_tokens
        salvar_consumo_tokens(tokens_consumidos, "analise")
        
        # Atualizar status - Finalizando
        status_text.text("‚ú® Finalizando e formatando an√°lise...")
        progress_bar.progress(90)
        time.sleep(0.5)
        
        analise = response.choices[0].message.content.strip()
        analise_id = f"{datetime.now().strftime('%Y%m%d%H%M%S')}_{hashlib.md5(analise.encode()).hexdigest()[:8]}"
        
        # Calcular tempo de processamento
        tempo_processamento = time.time() - tempo_inicio
        
        # Preparar dados para salvar no hist√≥rico
        analise_data = {
            "id": analise_id,
            "data": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            "plataforma": plataforma,
            "objetivo": objetivo,
            "total_leads": len(df),
            "colunas": list(df.columns),
            "analise": analise,
            "tempo_processamento": tempo_processamento,
            "resumo_estatistico": resumo_estatistico
        }
        
        # Salvar no hist√≥rico
        salvar_analise_leads(analise_data)
        
        # Salvar m√©tricas
        metricas_data = {
            "analise": {
                "data": analise_data["data"],
                "plataforma": plataforma,
                "objetivo": objetivo,
                "total_leads": len(df),
                "tempo_processamento": tempo_processamento
            }
        }
        salvar_metricas(metricas_data)
        
        # Conclu√≠do
        status_text.text("‚úÖ An√°lise conclu√≠da com sucesso!")
        progress_bar.progress(100)
        time.sleep(0.5)
        
        # Limpar elementos de progresso
        progress_bar.empty()
        status_text.empty()
        
        return analise, analise_id
    except Exception as e:
        # Em caso de erro
        status_text.text("‚ùå Erro ao analisar leads")
        progress_bar.progress(0)
        time.sleep(1)
        progress_bar.empty()
        status_text.empty()
        st.error(f"Erro ao analisar os leads: {e}")
        return None, None

def mostrar_historico_analises():
    """Mostra o hist√≥rico de an√°lises com op√ß√µes de feedback e m√©tricas"""
    st.subheader("üìö Hist√≥rico de An√°lises")
    
    # Filtro de tags
    st.sidebar.subheader("üîç Filtros")
    tags_selecionadas = []
    
    for categoria, tags in TAGS_PREDEFINIDAS.items():
        st.sidebar.write(f"**{categoria}:**")
        for tag in tags:
            # Criar uma chave √∫nica combinando categoria e tag
            chave_unica = f"filter_{categoria}_{tag}".replace(" ", "_").lower()
            if st.sidebar.checkbox(tag, key=chave_unica):
                tags_selecionadas.append(tag)
    
    historico_analises = carregar_historico_analises()
    
    if not historico_analises:
        st.info("Nenhuma an√°lise realizada ainda.")
    else:
        # Filtrar an√°lises por tags selecionadas
        if tags_selecionadas:
            historico_analises = [
                analise for analise in historico_analises
                if any(tag in analise.get('tags', []) for tag in tags_selecionadas)
            ]
        
        for idx, analise in enumerate(reversed(historico_analises)):
            with st.expander(f"An√°lise #{len(historico_analises) - idx} - {analise['plataforma']} - {analise['data']}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Plataforma:** {analise['plataforma']}")
                    st.write(f"**Objetivo:** {analise['objetivo']}")
                    st.write(f"**Data:** {analise['data']}")
                    st.write(f"**Total de Leads:** {analise['total_leads']}")
                    st.write("**Colunas Analisadas:**")
                    for col in analise['colunas']:
                        st.write(f"- {col}")
                
                with col2:
                    # Gerenciamento de Tags
                    st.write("**Tags:**")
                    tags_atuais = analise.get('tags', [])
                    
                    # Mostrar tags atuais
                    if tags_atuais:
                        for tag in tags_atuais:
                            st.write(f"üè∑Ô∏è {tag}")
                    
                    # Formul√°rio para adicionar novas tags
                    with st.form(f"tags_form_{idx}"):
                        novas_tags = []
                        for categoria, tags in TAGS_PREDEFINIDAS.items():
                            st.write(f"**{categoria}:**")
                            for tag in tags:
                                # Criar uma chave √∫nica para cada checkbox de tag
                                chave_unica = f"tag_{idx}_{categoria}_{tag}".replace(" ", "_").lower()
                                if st.checkbox(tag, key=chave_unica, value=tag in tags_atuais):
                                    novas_tags.append(tag)
                        
                        if st.form_submit_button("Atualizar Tags"):
                            if atualizar_tags_analise(analise['id'], novas_tags):
                                st.success("Tags atualizadas com sucesso!")
                                st.rerun()
                
                st.write("**An√°lise:**")
                st.markdown(analise['analise'])
                
                # Mostrar insights baseados nas tags
                if analise.get('tags'):
                    st.write("**üí° Insights Relacionados:**")
                    insights = gerar_insights_com_tags(analise, analise['tags'])
                    st.markdown(insights)
                
                # Se√ß√£o de Feedback
                st.subheader("üí≠ Feedback da An√°lise")
                feedback = carregar_feedback(analise['id'])
                
                if feedback:
                    st.write("**Feedback Atual:**")
                    st.write(f"Nota: {'‚≠ê' * feedback['nota']}")
                    if feedback['pontos_positivos']:
                        st.write(f"**Pontos Positivos:** {feedback['pontos_positivos']}")
                    if feedback['pontos_melhorar']:
                        st.write(f"**Pontos a Melhorar:** {feedback['pontos_melhorar']}")
                    
                    if feedback.get('editado'):
                        st.write(f"**√öltima edi√ß√£o:** {feedback['ultima_edicao']}")
                    
                    # Bot√£o para editar feedback
                    if st.button("‚úèÔ∏è Editar Feedback", key=f"edit_feedback_{idx}"):
                        with st.form(f"edit_feedback_form_{idx}"):
                            novos_pontos_positivos = st.text_area(
                                "Pontos Positivos:",
                                value=feedback['pontos_positivos'],
                                key=f"edit_pos_{idx}"
                            )
                            novos_pontos_melhorar = st.text_area(
                                "Pontos a Melhorar:",
                                value=feedback['pontos_melhorar'],
                                key=f"edit_neg_{idx}"
                            )
                            nova_nota = st.slider(
                                "Nota:",
                                1, 5,
                                value=feedback['nota'],
                                key=f"edit_nota_{idx}"
                            )
                            if st.form_submit_button("Salvar Altera√ß√µes"):
                                novo_feedback = {
                                    "pontos_positivos": novos_pontos_positivos,
                                    "pontos_melhorar": novos_pontos_melhorar,
                                    "nota": nova_nota
                                }
                                if editar_feedback(analise['id'], novo_feedback):
                                    st.success("Feedback atualizado com sucesso!")
                                    st.rerun()
                else:
                    # Formul√°rio para novo feedback
                    with st.form(f"feedback_form_{idx}"):
                        pontos_positivos = st.text_area("Pontos Positivos:", 
                            placeholder="O que voc√™ achou mais √∫til nesta an√°lise?")
                        pontos_melhorar = st.text_area("Pontos a Melhorar:", 
                            placeholder="O que poderia ser melhorado nesta an√°lise?")
                        nota = st.slider("Nota da An√°lise:", 1, 5, 3)
                        if st.form_submit_button("Enviar Feedback"):
                            feedback_data = {
                                "pontos_positivos": pontos_positivos,
                                "pontos_melhorar": pontos_melhorar,
                                "nota": nota
                            }
                            if salvar_feedback(analise['id'], feedback_data):
                                st.success("Feedback enviado com sucesso!")
                                st.rerun()
                
                # Se√ß√£o de M√©tricas da Plataforma
                st.subheader("üìä M√©tricas da Plataforma")
                with st.form(f"metricas_form_{idx}"):
                    st.write(f"**M√©tricas para {analise['plataforma']}:**")
                    
                    if analise['plataforma'] == "Disparo de WhatsApp":
                        respostas = st.number_input("N√∫mero de Respostas:", min_value=0)
                        conversoes = st.number_input("N√∫mero de Convers√µes:", min_value=0)
                        total_disparos = st.number_input("Total de Disparos:", min_value=0)
                        
                        if st.form_submit_button("Salvar M√©tricas"):
                            metricas = {
                                "respostas": respostas,
                                "taxa_conversao": (conversoes / total_disparos * 100) if total_disparos > 0 else 0,
                                "total_disparos": total_disparos
                            }
                            if salvar_metricas_plataforma(analise['plataforma'], metricas):
                                st.success("M√©tricas salvas com sucesso!")
                    
                    elif analise['plataforma'] == "Email Marketing":
                        taxa_abertura = st.number_input("Taxa de Abertura (%):", min_value=0.0, max_value=100.0)
                        taxa_clique = st.number_input("Taxa de Clique (%):", min_value=0.0, max_value=100.0)
                        taxa_conversao = st.number_input("Taxa de Convers√£o (%):", min_value=0.0, max_value=100.0)
                        total_envios = st.number_input("Total de Envios:", min_value=0)
                        
                        if st.form_submit_button("Salvar M√©tricas"):
                            metricas = {
                                "taxa_abertura": taxa_abertura,
                                "taxa_clique": taxa_clique,
                                "taxa_conversao": taxa_conversao,
                                "total_envios": total_envios
                            }
                            if salvar_metricas_plataforma(analise['plataforma'], metricas):
                                st.success("M√©tricas salvas com sucesso!")
                    
                    elif analise['plataforma'] == "Conte√∫do para Redes Sociais (Feed)":
                        compartilhamentos = st.number_input("Compartilhamentos:", min_value=0)
                        likes = st.number_input("Likes:", min_value=0)
                        comentarios = st.number_input("Coment√°rios:", min_value=0)
                        alcance = st.number_input("Alcance:", min_value=0)
                        
                        if st.form_submit_button("Salvar M√©tricas"):
                            metricas = {
                                "compartilhamentos": compartilhamentos,
                                "likes": likes,
                                "comentarios": comentarios,
                                "alcance": alcance
                            }
                            if salvar_metricas_plataforma(analise['plataforma'], metricas):
                                st.success("M√©tricas salvas com sucesso!")
                    
                    elif analise['plataforma'] == "Conte√∫do para Redes Sociais (Stories)":
                        visualizacoes = st.number_input("Visualiza√ß√µes:", min_value=0)
                        respostas = st.number_input("Respostas:", min_value=0)
                        cliques = st.number_input("Cliques:", min_value=0)
                        alcance = st.number_input("Alcance:", min_value=0)
                        
                        if st.form_submit_button("Salvar M√©tricas"):
                            metricas = {
                                "visualizacoes": visualizacoes,
                                "respostas": respostas,
                                "cliques": cliques,
                                "alcance": alcance
                            }
                            if salvar_metricas_plataforma(analise['plataforma'], metricas):
                                st.success("M√©tricas salvas com sucesso!")
                    
                    elif analise['plataforma'] == "Copy para SMS":
                        taxa_clique = st.number_input("Taxa de Clique (%):", min_value=0.0, max_value=100.0)
                        taxa_conversao = st.number_input("Taxa de Convers√£o (%):", min_value=0.0, max_value=100.0)
                        total_envios = st.number_input("Total de Envios:", min_value=0)
                        
                        if st.form_submit_button("Salvar M√©tricas"):
                            metricas = {
                                "taxa_clique": taxa_clique,
                                "taxa_conversao": taxa_conversao,
                                "total_envios": total_envios
                            }
                            if salvar_metricas_plataforma(analise['plataforma'], metricas):
                                st.success("M√©tricas salvas com sucesso!")
                
                # Bot√£o para copiar a an√°lise
                if st.button("üìã Copiar An√°lise", key=f"copy_hist_{idx}"):
                    st.code(analise['analise'])
                    st.success("An√°lise copiada para a √°rea de transfer√™ncia!")

def carregar_feedback(analise_id):
    """Carrega o feedback para uma an√°lise espec√≠fica"""
    try:
        filename = f"feedback/feedback_{st.session_state.username}.json"
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                feedbacks = json.load(f)
                return feedbacks.get(analise_id, None)
        return None
    except Exception as e:
        st.error(f"Erro ao carregar feedback: {e}")
        return None

def carregar_metricas():
    """Carrega as m√©tricas de performance do usu√°rio"""
    try:
        filename = f"metricas/metricas_{st.session_state.username}.json"
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return None
    except Exception as e:
        st.error(f"Erro ao carregar m√©tricas: {e}")
        return None

def carregar_metricas_plataforma():
    """Carrega as m√©tricas espec√≠ficas da plataforma"""
    try:
        filename = f"metricas/metricas_plataforma_{st.session_state.username}.json"
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return None
    except Exception as e:
        st.error(f"Erro ao carregar m√©tricas da plataforma: {e}")
        return None

def carregar_consumo_tokens():
    """Carrega o consumo de tokens do usu√°rio"""
    try:
        filename = f"metricas/tokens_{st.session_state.username}.json"
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {
            "total_tokens": 0,
            "historico": [],
            "por_operacao": {
                "copy": 0,
                "analise": 0
            }
        }
    except Exception as e:
        st.error(f"Erro ao carregar consumo de tokens: {e}")
        return None

def gerar_dashboard():
    """Gera o dashboard com m√©tricas e visualiza√ß√µes importantes"""
    st.subheader("üìä Dashboard Geral")
    
    # Carregar dados
    metricas = carregar_metricas()
    metricas_plataforma = carregar_metricas_plataforma()
    historico_analises = carregar_historico_analises()
    consumo_tokens = carregar_consumo_tokens()
    
    if not metricas and not metricas_plataforma and not historico_analises:
        st.info("Nenhum dado dispon√≠vel para exibir no dashboard. Comece a usar o sistema para gerar m√©tricas.")
        return
    
    # Layout em colunas para m√©tricas principais
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        total_analises = len(historico_analises) if historico_analises else 0
        st.metric("Total de An√°lises", total_analises)
    
    with col2:
        total_feedback = metricas.get('total_feedback', 0) if metricas else 0
        st.metric("Total de Feedback", total_feedback)
    
    with col3:
        media_notas = metricas.get('media_notas', 0) if metricas else 0
        st.metric("M√©dia de Notas", f"{media_notas:.1f} ‚≠ê")
    
    with col4:
        tempo_medio = metricas.get('tempo_medio_analise', 0) if metricas else 0
        st.metric("Tempo M√©dio de An√°lise", f"{tempo_medio:.1f}s")
    
    with col5:
        total_tokens = consumo_tokens.get('total_tokens', 0) if consumo_tokens else 0
        st.metric("Total de Tokens", f"{total_tokens:,}")
    
    # Adicionar se√ß√£o de consumo de tokens
    st.subheader("üî¢ Consumo de Tokens")
    col1, col2 = st.columns(2)
    
    with col1:
        if consumo_tokens:
            # Gr√°fico de pizza para distribui√ß√£o por opera√ß√£o
            fig = px.pie(
                values=[
                    consumo_tokens['por_operacao']['copy'],
                    consumo_tokens['por_operacao']['analise']
                ],
                names=['Copy', 'An√°lise'],
                title='Distribui√ß√£o de Tokens por Opera√ß√£o'
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        if consumo_tokens and consumo_tokens['historico']:
            # Preparar dados para o gr√°fico de linha
            historico = consumo_tokens['historico'][-10:]  # √öltimas 10 opera√ß√µes
            datas = [datetime.strptime(h['data'], "%d/%m/%Y %H:%M:%S") for h in historico]
            tokens = [h['tokens'] for h in historico]
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=datas,
                y=tokens,
                mode='lines+markers',
                name='Tokens Consumidos'
            ))
            
            fig.update_layout(
                title='Consumo de Tokens nas √öltimas Opera√ß√µes',
                xaxis_title='Data',
                yaxis_title='Tokens',
                showlegend=True
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°ficos e an√°lises
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà An√°lises por Plataforma")
        if historico_analises:
            # Preparar dados para o gr√°fico
            plataformas = {}
            for analise in historico_analises:
                plataforma = analise['plataforma']
                plataformas[plataforma] = plataformas.get(plataforma, 0) + 1
            
            # Criar gr√°fico de barras
            fig = px.bar(
                x=list(plataformas.keys()),
                y=list(plataformas.values()),
                labels={'x': 'Plataforma', 'y': 'Quantidade'},
                title='Distribui√ß√£o de An√°lises por Plataforma'
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üéØ Objetivos Mais Comuns")
        if historico_analises:
            # Preparar dados para o gr√°fico
            objetivos = {}
            for analise in historico_analises:
                objetivo = analise['objetivo']
                objetivos[objetivo] = objetivos.get(objetivo, 0) + 1
            
            # Criar gr√°fico de pizza
            fig = px.pie(
                values=list(objetivos.values()),
                names=list(objetivos.keys()),
                title='Distribui√ß√£o de Objetivos'
            )
            st.plotly_chart(fig, use_container_width=True)
    
    # M√©tricas por Plataforma
    st.subheader("üìä M√©tricas por Plataforma")
    if metricas_plataforma:
        for plataforma, metricas in metricas_plataforma.items():
            with st.expander(f"üì± {plataforma}"):
                col1, col2, col3, col4 = st.columns(4)
                
                if plataforma == "Disparo de WhatsApp":
                    with col1:
                        st.metric("Respostas", metricas.get('respostas', 0))
                    with col2:
                        st.metric("Taxa de Convers√£o", f"{metricas.get('taxa_conversao', 0):.1f}%")
                    with col3:
                        st.metric("Total de Disparos", metricas.get('total_disparos', 0))
                
                elif plataforma == "Email Marketing":
                    with col1:
                        st.metric("Taxa de Abertura", f"{metricas.get('taxa_abertura', 0):.1f}%")
                    with col2:
                        st.metric("Taxa de Clique", f"{metricas.get('taxa_clique', 0):.1f}%")
                    with col3:
                        st.metric("Taxa de Convers√£o", f"{metricas.get('taxa_conversao', 0):.1f}%")
                    with col4:
                        st.metric("Total de Envios", metricas.get('total_envios', 0))
                
                elif plataforma == "Conte√∫do para Redes Sociais (Feed)":
                    with col1:
                        st.metric("Compartilhamentos", metricas.get('compartilhamentos', 0))
                    with col2:
                        st.metric("Likes", metricas.get('likes', 0))
                    with col3:
                        st.metric("Coment√°rios", metricas.get('comentarios', 0))
                    with col4:
                        st.metric("Alcance", metricas.get('alcance', 0))
                
                elif plataforma == "Conte√∫do para Redes Sociais (Stories)":
                    with col1:
                        st.metric("Visualiza√ß√µes", metricas.get('visualizacoes', 0))
                    with col2:
                        st.metric("Respostas", metricas.get('respostas', 0))
                    with col3:
                        st.metric("Cliques", metricas.get('cliques', 0))
                    with col4:
                        st.metric("Alcance", metricas.get('alcance', 0))
                
                elif plataforma == "Copy para SMS":
                    with col1:
                        st.metric("Taxa de Clique", f"{metricas.get('taxa_clique', 0):.1f}%")
                    with col2:
                        st.metric("Taxa de Convers√£o", f"{metricas.get('taxa_conversao', 0):.1f}%")
                    with col3:
                        st.metric("Total de Envios", metricas.get('total_envios', 0))
    
    # An√°lise Temporal
    st.subheader("‚è≥ An√°lise Temporal")
    if historico_analises:
        # Preparar dados para o gr√°fico
        datas = []
        for analise in historico_analises:
            try:
                data = datetime.strptime(analise['data'], "%d/%m/%Y %H:%M:%S")
                datas.append(data)
            except:
                continue
        
        if datas:
            # Criar gr√°fico de linha
            datas.sort()
            contagem = list(range(1, len(datas) + 1))
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=datas,
                y=contagem,
                mode='lines+markers',
                name='An√°lises'
            ))
            
            fig.update_layout(
                title='Evolu√ß√£o do N√∫mero de An√°lises',
                xaxis_title='Data',
                yaxis_title='N√∫mero de An√°lises',
                showlegend=True
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # Tags Mais Utilizadas
    st.subheader("üè∑Ô∏è Tags Mais Utilizadas")
    if historico_analises:
        # Contar frequ√™ncia de tags
        tags_frequencia = {}
        for analise in historico_analises:
            for tag in analise.get('tags', []):
                tags_frequencia[tag] = tags_frequencia.get(tag, 0) + 1
        
        if tags_frequencia:
            # Criar gr√°fico de barras horizontais
            fig = px.bar(
                x=list(tags_frequencia.values()),
                y=list(tags_frequencia.keys()),
                orientation='h',
                labels={'x': 'Frequ√™ncia', 'y': 'Tag'},
                title='Frequ√™ncia de Tags'
            )
            st.plotly_chart(fig, use_container_width=True)

# Adicionar ap√≥s as configura√ß√µes iniciais
def salvar_consumo_tokens(tokens_consumidos, tipo_operacao):
    try:
        # Adicionar usu√°rio_id se dispon√≠vel
        if 'username' in st.session_state:
            usuario_id = st.session_state.username
        else:
            usuario_id = None

        # Formatar dados para o Supabase
        payload = {
            "tipo": tipo_operacao,
            "total_tokens": tokens_consumidos,
            "plataforma": "copy" if tipo_operacao == "copy" else "analise",
            "tempo_processamento": 0, 
            "usuario_id": usuario_id,
            "data": datetime.now().isoformat()
        }

        # Salvar no Supabase
        response = supabase.table('metricas').insert(payload).execute()
        
        if response.data:
            return True
        else:
            st.error("Erro ao salvar consumo de tokens no Supabase.")
            return False
    except Exception as e:
        st.error(f"Erro ao salvar consumo de tokens: {e}")
        return False

# Adicionar ap√≥s as configura√ß√µes iniciais
def salvar_metricas(metricas_data):
    """Salva as m√©tricas de performance no Supabase"""
    try:
        # Adicionar usu√°rio_id se dispon√≠vel
        if 'username' in st.session_state:
            metricas_data['usuario_id'] = st.session_state.username

        # Formatar dados para o Supabase
        if "analise" in metricas_data:
            analise = metricas_data["analise"]
            payload = {
                "tipo": "analise",
                "plataforma": analise["plataforma"],
                "total_tokens": 0,
                "tempo_processamento": analise["tempo_processamento"],
                "data": datetime.now().isoformat()
            }
        elif "copy" in metricas_data:
            payload = {
                "tipo": "copy",
                "plataforma": "copy",
                "total_tokens": 0, 
                "tempo_processamento": 0,
                "data": datetime.now().isoformat()
            }
        elif "feedback" in metricas_data:
            feedback = metricas_data["feedback"]
            payload = {
                "tipo": "feedback",
                "plataforma": "feedback",
                "total_tokens": 0,
                "tempo_processamento": 0,
                "data": datetime.now().isoformat()
            }

        # Salvar no Supabase
        response = supabase.table('metricas').insert(payload).execute()
        
        if response.data:
            return True
        else:
            st.error("Erro ao salvar m√©tricas no Supabase.")
            return False
    except Exception as e:
        st.error(f"Erro ao salvar m√©tricas: {e}")
        return False

# --- Interface Streamlit ---
st.set_page_config(page_title="Gerador de Copy Mencare", layout="wide")

# Verificar autentica√ß√£o
if not st.session_state.autenticado:
    login()
else:
    # Inicializar st.session_state se n√£o existir
    if 'generated_copy' not in st.session_state:
        st.session_state.generated_copy = ""
    if 'form_data' not in st.session_state:
        st.session_state.form_data = {}
    if 'historico' not in st.session_state:
        st.session_state.historico = []
    if 'analise_leads' not in st.session_state:
        st.session_state.analise_leads = None

    # Barra superior com informa√ß√µes do usu√°rio e bot√£o de logout
    col1, col2 = st.columns([6, 1])
    with col1:
        st.title("ü§ñ Gerador de Copy Mencare ‚úçÔ∏è")
    with col2:
        if st.button("üö™ Logout"):
            st.session_state.autenticado = False
            st.session_state.username = None
            st.session_state.login_success = False
            st.rerun()

    # Criar as abas
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìù Gerar Copy", "üìö Hist√≥rico", "üìä An√°lise de Leads", "üìà M√©tricas", "üéØ Dashboard"])

    with tab1:
        st.markdown("Preencha os campos abaixo para gerar sua copy e, opcionalmente, salv√°-la no Baserow.")

        with st.sidebar:
            st.header("‚öôÔ∏è Configura√ß√µes da Copy")
            plataforma_opcoes = [
                "Disparo de WhatsApp",
                "Email Marketing",
                "Conte√∫do para Redes Sociais (Feed)",
                "Conte√∫do para Redes Sociais (Stories)",
                "Copy para SMS"
            ]
            plataforma = st.selectbox("Selecione a Plataforma:", plataforma_opcoes)
            
            # Mostrar limite de tokens para a plataforma selecionada
            tokens_limite = TOKENS_POR_PLATAFORMA.get(plataforma, 300)
            st.info(f"Limite de tokens para esta plataforma: {tokens_limite}")
            
            objetivo = st.text_input("üéØ Objetivo da Copy:", placeholder="Ex: Gerar leads, Vender produto X, Aumentar engajamento")
            publico_alvo = st.text_input("üë• P√∫blico-Alvo:", placeholder="Ex: Jovens de 18-25 anos interessados em tecnologia")
            produto_servico = st.text_input("üõçÔ∏è Produto/Servi√ßo:", placeholder="Ex: Curso online de Python, Consultoria de Marketing Digital")
            tom_de_voz_opcoes = ["Formal", "Informal", "Amig√°vel", "Persuasivo", "Divertido", "Urgente"]
            tom_de_voz = st.selectbox("üó£Ô∏è Tom de Voz:", tom_de_voz_opcoes)
            cta = st.text_input("üì¢ Call to Action (CTA):", placeholder="Ex: Compre agora, Saiba mais, Inscreva-se j√°")
            informacoes_adicionais = st.text_area("‚ÑπÔ∏è Informa√ß√µes Adicionais (Opcional):", placeholder="Ex: Mencionar promo√ß√£o de 20% OFF, destacar benef√≠cio Y")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìù Campos para Gera√ß√£o")
            if st.button("‚ú® Gerar Copy Agora!", type="primary", use_container_width=True):
                if not all([plataforma, objetivo, publico_alvo, produto_servico, tom_de_voz, cta]):
                    st.warning("Por favor, preencha todos os campos obrigat√≥rios antes de gerar a copy.")
                else:
                    with st.spinner("Gerando sua copy com IA... Aguarde! üß†"):
                        copy_gerada = gerar_copy_openai(
                            plataforma, objetivo, publico_alvo, produto_servico, tom_de_voz, cta, informacoes_adicionais
                        )
                        if copy_gerada:
                            st.session_state.generated_copy = copy_gerada
                            st.session_state.form_data = {
                                "plataforma": plataforma,
                                "objetivo": objetivo,
                                "publico_alvo": publico_alvo,
                                "produto_servico": produto_servico,
                                "tom_de_voz": tom_de_voz,
                                "cta": cta,
                                "copy_gerada": copy_gerada,
                                "data_geracao": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                            }
                            # Adicionar ao hist√≥rico
                            st.session_state.historico.append(st.session_state.form_data)
                        else:
                            st.session_state.generated_copy = ""
                            st.session_state.form_data = {}

        with col2:
            st.subheader("üìÑ Copy Gerada")
            if st.session_state.generated_copy:
                st.text_area("Resultado:", st.session_state.generated_copy, height=300)
                if SUPABASE_URL and SUPABASE_KEY:
                    if st.button("üíæ Salvar Copy no Supabase", use_container_width=True):
                        with st.spinner("Salvando no Supabase..."):
                            if st.session_state.form_data:
                                salvar_no_supabase(st.session_state.form_data)
                            else:
                                st.error("Nenhuma copy gerada para salvar.")
                elif st.session_state.generated_copy:
                    st.info("Configure as vari√°veis de ambiente do Supabase para habilitar o salvamento.")
            else:
                st.info("A copy gerada aparecer√° aqui.")

    with tab2:
        st.subheader("üìö Hist√≥rico de Copies")
        
        if not st.session_state.historico:
            st.info("Nenhuma copy gerada ainda. O hist√≥rico aparecer√° aqui ap√≥s gerar algumas copies.")
        else:
            # Mostrar hist√≥rico em ordem reversa (mais recente primeiro)
            for idx, item in enumerate(reversed(st.session_state.historico)):
                with st.expander(f"Copy #{len(st.session_state.historico) - idx} - {item['plataforma']} - {item['data_geracao']}"):
                    st.write(f"**Plataforma:** {item['plataforma']}")
                    st.write(f"**Objetivo:** {item['objetivo']}")
                    st.write(f"**P√∫blico-Alvo:** {item['publico_alvo']}")
                    st.write(f"**Produto/Servi√ßo:** {item['produto_servico']}")
                    st.write(f"**Tom de Voz:** {item['tom_de_voz']}")
                    st.write(f"**CTA:** {item['cta']}")
                    st.write("**Copy Gerada:**")
                    st.text_area("", item['copy_gerada'], height=200, key=f"copy_{idx}")
                    
                    # Bot√£o para copiar a copy
                    if st.button("üìã Copiar Copy", key=f"copy_btn_{idx}"):
                        st.code(item['copy_gerada'])
                        st.success("Copy copiada para a √°rea de transfer√™ncia!")

    with tab3:
        st.subheader("üìä An√°lise de Leads via CSV")
        
        # Configura√ß√µes da an√°lise
        col1, col2 = st.columns(2)
        
        with col1:
            plataforma_analise = st.selectbox(
                "Selecione a Plataforma para An√°lise:",
                ["Disparo de WhatsApp", "Email Marketing", "Conte√∫do para Redes Sociais (Feed)", 
                 "Conte√∫do para Redes Sociais (Stories)", "Copy para SMS"],
                key="plataforma_analise"
            )
        
        with col2:
            objetivo_analise = st.text_input(
                "Objetivo da An√°lise:",
                placeholder="Ex: Aumentar convers√µes, Melhorar engajamento, Gerar vendas",
                key="objetivo_analise"
            )
        
        # Upload de m√∫ltiplos arquivos CSV
        uploaded_files = st.file_uploader(
            "Escolha um ou mais arquivos CSV com seus leads", 
            type=['csv'],
            accept_multiple_files=True
        )
        
        if uploaded_files:
            try:
                # Lista para armazenar todos os DataFrames
                dfs = []
                total_leads = 0
                
                # Processar cada arquivo
                for uploaded_file in uploaded_files:
                    df = pd.read_csv(uploaded_file)
                    dfs.append(df)
                    total_leads += len(df)
                
                # Mostrar preview dos dados
                st.subheader("üìã Preview dos Dados")
                
                # Criar abas para cada arquivo
                tabs = st.tabs([f"Arquivo {i+1}" for i in range(len(dfs))])
                
                for i, tab in enumerate(tabs):
                    with tab:
                        st.write(f"**Arquivo {i+1}:** {uploaded_files[i].name}")
                        st.write(f"Total de leads neste arquivo: {len(dfs[i])}")
                        st.dataframe(dfs[i].head())
                        st.write("Colunas dispon√≠veis:")
                        for col in dfs[i].columns:
                            st.write(f"- {col}")
                
                # Mostrar informa√ß√µes b√°sicas do dataset combinado
                st.subheader("‚ÑπÔ∏è Informa√ß√µes do Dataset Combinado")
                st.write(f"Total de leads em todos os arquivos: {total_leads}")
                
                # Bot√£o para iniciar an√°lise
                if st.button("üîç Iniciar An√°lise", type="primary"):
                    if not objetivo_analise:
                        st.warning("Por favor, defina um objetivo para a an√°lise.")
                    else:
                        with st.spinner("Analisando seus leads... Isso pode levar alguns minutos."):
                            # Combinar todos os DataFrames
                            df_combinado = pd.concat(dfs, ignore_index=True)
                            
                            # Remover duplicatas se houver
                            df_combinado = df_combinado.drop_duplicates()
                            
                            # Realizar a an√°lise
                            analise, analise_id = analisar_leads_csv(df_combinado, plataforma_analise, objetivo_analise)
                            if analise:
                                st.session_state.analise_leads = analise
                                st.session_state.analise_id = analise_id
                                st.success("An√°lise conclu√≠da e salva no hist√≥rico!")
                
                # Mostrar resultados da an√°lise
                if st.session_state.analise_leads:
                    st.subheader("üìä Resultados da An√°lise")
                    st.markdown(st.session_state.analise_leads)
                    
                    # Se√ß√£o de feedback
                    st.subheader("üí≠ Feedback da An√°lise")
                    with st.form("feedback_form"):
                        pontos_positivos = st.text_area("Pontos Positivos:", 
                            placeholder="O que voc√™ achou mais √∫til nesta an√°lise?")
                        pontos_melhorar = st.text_area("Pontos a Melhorar:", 
                            placeholder="O que poderia ser melhorado nesta an√°lise?")
                        nota = st.slider("Nota da An√°lise:", 1, 5, 3)
                        feedback_submit = st.form_submit_button("Enviar Feedback")
                        
                        if feedback_submit:
                            feedback_data = {
                                "data": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                                "pontos_positivos": pontos_positivos,
                                "pontos_melhorar": pontos_melhorar,
                                "nota": nota
                            }
                            if salvar_feedback(st.session_state.analise_id, feedback_data):
                                st.success("Feedback enviado com sucesso! Obrigado por ajudar a melhorar nossas an√°lises.")
                    
                    # Bot√£o para copiar a an√°lise
                    if st.button("üìã Copiar An√°lise"):
                        st.code(st.session_state.analise_leads)
                        st.success("An√°lise copiada para a √°rea de transfer√™ncia!")
            
            except Exception as e:
                st.error(f"Erro ao processar os arquivos CSV: {e}")
                st.info("Certifique-se de que os arquivos est√£o no formato CSV v√°lido e cont√™m dados estruturados.")
        else:
            st.info("Fa√ßa upload de um ou mais arquivos CSV para come√ßar a an√°lise.")

        mostrar_historico_analises()

    with tab4:
        st.subheader("üìà M√©tricas de Performance")
        
        metricas = carregar_metricas()
        
        if not metricas:
            st.info("Nenhuma m√©trica dispon√≠vel ainda. Comece a usar o sistema para gerar m√©tricas.")
        else:
            # M√©tricas gerais
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Total de An√°lises", metricas["total_analises"])
                st.metric("Total de Copies", metricas["total_copies"])
            
            with col2:
                st.metric("Tempo M√©dio de An√°lise", f"{metricas['tempo_medio_analise']:.2f}s")
                st.metric("M√©dia de Notas", f"{metricas['media_notas']:.1f} ‚≠ê")
            
            with col3:
                st.metric("Total de Feedback", metricas["total_feedback"])
            
            # Gr√°ficos e an√°lises detalhadas
            st.subheader("üìä An√°lise Detalhada")
            
            # Plataformas mais usadas
            st.write("**Plataformas Mais Utilizadas**")
            plataformas_df = pd.DataFrame(
                list(metricas["plataformas_mais_usadas"].items()),
                columns=["Plataforma", "Quantidade"]
            )
            st.bar_chart(plataformas_df.set_index("Plataforma"))
            
            # Objetivos mais comuns
            st.write("**Objetivos Mais Comuns**")
            objetivos_df = pd.DataFrame(
                list(metricas["objetivos_mais_comuns"].items()),
                columns=["Objetivo", "Quantidade"]
            )
            st.bar_chart(objetivos_df.set_index("Objetivo"))
            
            # √öltimas an√°lises
            st.subheader("üìã √öltimas An√°lises")
            if metricas["analises"]:
                ultimas_analises = pd.DataFrame(metricas["analises"][-5:])
                st.dataframe(ultimas_analises[["data", "plataforma", "objetivo", "total_leads", "tempo_processamento"]])
            
            # Exportar m√©tricas
            if st.button("üì• Exportar M√©tricas"):
                metricas_json = json.dumps(metricas, indent=4)
                st.download_button(
                    label="Baixar M√©tricas",
                    data=metricas_json,
                    file_name=f"metricas_{st.session_state.username}_{datetime.now().strftime('%Y%m%d')}.json",
                    mime="application/json"
                )

    with tab5:
        gerar_dashboard()

    st.markdown("---")